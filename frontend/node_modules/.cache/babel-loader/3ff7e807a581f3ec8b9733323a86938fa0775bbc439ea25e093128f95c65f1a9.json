{"ast":null,"code":"var _jsxFileName = \"/Users/vc/Desktop/\\u4EC5\\u4F5C\\u4E3A\\u526F\\u672C/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PokerTable from './components/PokerTable';\nimport GameHistoryTable from './components/GameHistoryTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameHistory, setGameHistory] = useState([]);\n  const [cards, setCards] = useState({\n    cfr: null,\n    stupid: null\n  });\n  const [stats, setStats] = useState({\n    cfrWins: 0,\n    stupidWins: 0,\n    total: 0\n  });\n  const [isBotVsBot, setIsBotVsBot] = useState(false);\n  const [numGames, setNumGames] = useState(1000);\n  const [isDemoRunning, setIsDemoRunning] = useState(false);\n\n  // New state for tracking metrics\n  const [strategyData, setStrategyData] = useState([]);\n  const [payoffData, setPayoffData] = useState([]);\n  const [regretData, setRegretData] = useState([]);\n  const [iterationCount, setIterationCount] = useState(0);\n\n  // Keep track of CFR strategy\n  const [cfrStrategy, setCfrStrategy] = useState({\n    // Info sets with strategies [PASS probability, BET probability]\n    \"1\": [0.9, 0.1],\n    // Jack, first to act\n    \"2\": [0.5, 0.5],\n    // Queen, first to act\n    \"3\": [0.1, 0.9],\n    // King, first to act\n    \"1-bet\": [0.9, 0.1],\n    // Jack after opponent bets\n    \"2-bet\": [0.4, 0.6],\n    // Queen after opponent bets\n    \"3-bet\": [0.0, 1.0],\n    // King after opponent bets\n    \"1-pass\": [0.8, 0.2],\n    // Jack after opponent passes\n    \"2-pass\": [0.3, 0.7],\n    // Queen after opponent passes\n    \"3-pass\": [0.0, 1.0] // King after opponent passes\n  });\n\n  // Simple regret tracking\n  const [regretSum, setRegretSum] = useState({\n    \"1\": [0, 0],\n    \"2\": [0, 0],\n    \"3\": [0, 0],\n    \"1-bet\": [0, 0],\n    \"2-bet\": [0, 0],\n    \"3-bet\": [0, 0],\n    \"1-pass\": [0, 0],\n    \"2-pass\": [0, 0],\n    \"3-pass\": [0, 0]\n  });\n\n  // Get info set key based on card and history\n  const getInfoSet = (card, history) => {\n    if (history.length === 0) {\n      return card.toString();\n    }\n    const lastAction = history[history.length - 1].action;\n    return `${card}-${lastAction}`;\n  };\n\n  // Update strategy based on regrets\n  const updateStrategy = () => {\n    const newStrategy = {};\n    Object.keys(regretSum).forEach(infoSet => {\n      const regrets = regretSum[infoSet];\n      const positiveRegrets = [Math.max(0, regrets[0]), Math.max(0, regrets[1])];\n      const sum = positiveRegrets[0] + positiveRegrets[1];\n      if (sum > 0) {\n        newStrategy[infoSet] = [positiveRegrets[0] / sum, positiveRegrets[1] / sum];\n      } else {\n        // Keep existing strategy if all regrets are negative\n        newStrategy[infoSet] = cfrStrategy[infoSet] || [0.5, 0.5];\n      }\n    });\n    setCfrStrategy(newStrategy);\n\n    // Add to strategy data for visualization\n    setStrategyData(prevData => {\n      const newData = [...prevData];\n      newData.push({\n        iteration: iterationCount,\n        strategy: {\n          ...newStrategy\n        }\n      });\n\n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n  };\n\n  // Update regrets based on outcome\n  const updateRegrets = (infoSet, actionTaken, payoff) => {\n    const strategy = cfrStrategy[infoSet];\n    if (!strategy) return;\n    setRegretSum(prevRegrets => {\n      const newRegrets = {\n        ...prevRegrets\n      };\n      const actionIndex = actionTaken === 'pass' ? 0 : 1;\n      const otherIndex = 1 - actionIndex;\n\n      // Calculate counterfactual regret\n      // This is a simplified model - real CFR is more complex\n      newRegrets[infoSet] = [...newRegrets[infoSet]];\n      newRegrets[infoSet][otherIndex] += payoff * (1 - strategy[actionIndex]);\n      return newRegrets;\n    });\n\n    // Add to regret data for visualization\n    setRegretData(prevData => {\n      const newData = [...prevData];\n      const totalRegret = Object.values(regretSum).reduce((sum, regretPair) => sum + Math.abs(regretPair[0]) + Math.abs(regretPair[1]), 0);\n      newData.push({\n        iteration: iterationCount,\n        regret: totalRegret\n      });\n\n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n  };\n  const playGame = () => {\n    // Clear previous game history\n    setGameHistory([]);\n\n    // Deal cards\n    const dealtCards = [1, 2, 3];\n    shuffleArray(dealtCards);\n\n    // Randomly decide who goes first\n    const firstPlayer = Math.random() > 0.5 ? 'cfr' : 'stupid';\n    const secondPlayer = firstPlayer === 'cfr' ? 'stupid' : 'cfr';\n\n    // Assign cards\n    setCards({\n      cfr: firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1],\n      stupid: firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]\n    });\n\n    // Play the game\n    const history = playRound(firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    setGameHistory(history);\n\n    // Calculate payoff\n    const payoff = calculatePayoff(history, firstPlayer, dealtCards[0], dealtCards[1]);\n\n    // Add to payoff data for visualization\n    setPayoffData(prevData => {\n      const newData = [...prevData];\n      newData.push({\n        iteration: iterationCount,\n        payoff: payoff\n      });\n\n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n\n    // Update stats\n    const winner = determineWinner(history, firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    if (winner === 'cfr') {\n      setStats(prev => ({\n        ...prev,\n        cfrWins: prev.cfrWins + 1,\n        total: prev.total + 1\n      }));\n    } else if (winner === 'stupid') {\n      setStats(prev => ({\n        ...prev,\n        stupidWins: prev.stupidWins + 1,\n        total: prev.total + 1\n      }));\n    }\n\n    // Update iteration count\n    setIterationCount(prev => prev + 1);\n\n    // After each game, update the strategy based on accumulated regrets\n    updateStrategy();\n    return {\n      history,\n      winner,\n      payoff\n    };\n  };\n  const calculatePayoff = (history, firstPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return 0;\n    let payoff = 0;\n    const lastActions = history.slice(-2);\n    if (lastActions[0].action === 'pass' && lastActions[1].action === 'pass') {\n      // Both pass - higher card wins 1\n      payoff = firstCard > secondCard ? 1 : -1;\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'pass') {\n      // First bets, second passes - betting player wins 1\n      payoff = 1;\n    } else if (lastActions[0].action === 'pass' && lastActions[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        // Player 1 passes, Player 2 bets, Player 1 passes again - Player 2 wins 1\n        payoff = -1;\n      } else if (history.length > 2 && history[2].action === 'bet') {\n        // Both bet after pass - higher card wins 2\n        payoff = firstCard > secondCard ? 2 : -2;\n      }\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'bet') {\n      // Both bet - higher card wins 2\n      payoff = firstCard > secondCard ? 2 : -2;\n    }\n\n    // If CFR is the second player, flip the payoff\n    return firstPlayer === 'cfr' ? payoff : -payoff;\n  };\n  const playRound = (firstPlayer, secondPlayer, firstCard, secondCard) => {\n    const history = [];\n\n    // First player's action\n    const firstAction = firstPlayer === 'cfr' ? getCFRAction(firstCard, history) : 'bet'; // Stupid bot always bets\n    history.push({\n      player: firstPlayer,\n      action: firstAction\n    });\n\n    // Second player's action\n    const secondAction = secondPlayer === 'cfr' ? getCFRAction(secondCard, history) : 'bet'; // Stupid bot always bets\n    history.push({\n      player: secondPlayer,\n      action: secondAction\n    });\n\n    // If first player passed and second player bet, first player gets chance to call\n    if (firstAction === 'pass' && secondAction === 'bet') {\n      const finalAction = firstPlayer === 'cfr' ? getCFRAction(firstCard, history) : 'bet'; // Stupid bot always bets\n      history.push({\n        player: firstPlayer,\n        action: finalAction\n      });\n    }\n    return history;\n  };\n  const getCFRAction = (card, history) => {\n    const infoSet = getInfoSet(card, history);\n    const strategy = cfrStrategy[infoSet] || [0.5, 0.5];\n\n    // Sample action based on strategy probabilities\n    const random = Math.random();\n    const action = random < strategy[0] ? 'pass' : 'bet';\n\n    // Later, we'll update regrets based on the outcome\n    // This is handled after the game is complete\n\n    return action;\n  };\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  const determineWinner = (history, firstPlayer, secondPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return null;\n    const moves = history.slice(-2);\n\n    // Both pass\n    if (moves[0].action === 'pass' && moves[1].action === 'pass') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n\n    // First bets, second passes\n    if (moves[0].action === 'bet' && moves[1].action === 'pass') {\n      return firstPlayer;\n    }\n\n    // First passes, second bets\n    if (moves[0].action === 'pass' && moves[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        return secondPlayer;\n      }\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n\n    // Both bet\n    if (moves[0].action === 'bet' && moves[1].action === 'bet') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    return null;\n  };\n  const runBotVsBot = () => {\n    setIsBotVsBot(true);\n    setStats({\n      cfrWins: 0,\n      stupidWins: 0,\n      total: 0\n    });\n    for (let i = 0; i < numGames; i++) {\n      playGame();\n    }\n  };\n  const runSlowDemo = async () => {\n    setIsDemoRunning(true);\n    setIsBotVsBot(true);\n    setStats({\n      cfrWins: 0,\n      stupidWins: 0,\n      total: 0\n    });\n    setGameHistory([]);\n    setIterationCount(0);\n\n    // Reset strategy and regret tracking\n    setCfrStrategy({\n      \"1\": [0.5, 0.5],\n      \"2\": [0.5, 0.5],\n      \"3\": [0.5, 0.5],\n      \"1-bet\": [0.5, 0.5],\n      \"2-bet\": [0.5, 0.5],\n      \"3-bet\": [0.5, 0.5],\n      \"1-pass\": [0.5, 0.5],\n      \"2-pass\": [0.5, 0.5],\n      \"3-pass\": [0.5, 0.5]\n    });\n    setRegretSum({\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"1-bet\": [0, 0],\n      \"2-bet\": [0, 0],\n      \"3-bet\": [0, 0],\n      \"1-pass\": [0, 0],\n      \"2-pass\": [0, 0],\n      \"3-pass\": [0, 0]\n    });\n    setStrategyData([]);\n    setPayoffData([]);\n    setRegretData([]);\n\n    // Play 3000 games with small batches to keep UI responsive\n    const totalGames = 3000;\n    const batchSize = 50;\n    for (let i = 0; i < totalGames; i += batchSize) {\n      // Process a batch of games\n      for (let j = 0; j < batchSize && i + j < totalGames; j++) {\n        const {\n          history,\n          payoff\n        } = playGame();\n\n        // Update regrets for CFR player's actions in this game\n        if (history.length >= 2) {\n          const firstPlayer = history[0].player;\n          const card = cards[firstPlayer === 'cfr' ? 'cfr' : 'stupid'];\n          if (firstPlayer === 'cfr') {\n            // Update regret for first action\n            const infoSet = getInfoSet(card, []);\n            updateRegrets(infoSet, history[0].action, payoff);\n\n            // If there was a third action by CFR\n            if (history.length > 2 && history[0].player === 'cfr') {\n              const infoSetForThird = getInfoSet(card, [history[1]]);\n              updateRegrets(infoSetForThird, history[2].action, payoff);\n            }\n          } else {\n            // CFR was second to act\n            const infoSet = getInfoSet(card, [history[0]]);\n            updateRegrets(infoSet, history[1].action, payoff);\n          }\n        }\n      }\n\n      // Small delay between batches to allow UI updates\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    setIsDemoRunning(false);\n  };\n\n  // Render strategy and payoff charts\n  const renderStrategyVisualization = () => {\n    if (strategyData.length === 0) return null;\n    const latestStrategy = strategyData[strategyData.length - 1].strategy;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"strategy-visualization\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current CFR Strategy (Iteration \", iterationCount, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"strategy-grid\",\n        children: Object.entries(latestStrategy).map(([infoSet, probabilities]) => {\n          let description;\n          if (infoSet === \"1\") description = \"Jack (First)\";else if (infoSet === \"2\") description = \"Queen (First)\";else if (infoSet === \"3\") description = \"King (First)\";else if (infoSet === \"1-bet\") description = \"Jack (After Bet)\";else if (infoSet === \"2-bet\") description = \"Queen (After Bet)\";else if (infoSet === \"3-bet\") description = \"King (After Bet)\";else if (infoSet === \"1-pass\") description = \"Jack (After Pass)\";else if (infoSet === \"2-pass\") description = \"Queen (After Pass)\";else if (infoSet === \"3-pass\") description = \"King (After Pass)\";else description = infoSet;\n          const passProb = Math.round(probabilities[0] * 100);\n          const betProb = Math.round(probabilities[1] * 100);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"strategy-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-set\",\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"probabilities\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"probability-bar\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"pass-prob\",\n                  style: {\n                    width: `${passProb}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-prob\",\n                  style: {\n                    width: `${betProb}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"probability-labels\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pass-label\",\n                  children: [\"Pass: \", passProb, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"bet-label\",\n                  children: [\"Bet: \", betProb, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this)]\n          }, infoSet, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this);\n  };\n  const renderPayoffRegretChart = () => {\n    if (payoffData.length === 0) return null;\n\n    // For now just display the average payoff\n    const totalPayoff = payoffData.reduce((sum, data) => sum + data.payoff, 0);\n    const avgPayoff = totalPayoff / payoffData.length;\n\n    // Calculate total regret\n    const totalRegret = Object.values(regretSum).reduce((sum, regretPair) => sum + Math.abs(regretPair[0]) + Math.abs(regretPair[1]), 0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metrics-visualization\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Performance Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-title\",\n            children: \"Average Payoff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: avgPayoff.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-title\",\n            children: \"Total Regret\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: totalRegret.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-title\",\n            children: \"Iterations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: iterationCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kuhn Poker: CFR Bot vs Stupid Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Visualization of CFR learning over iterations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-primary\",\n            onClick: playGame,\n            disabled: isDemoRunning,\n            children: \"Play Single Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-primary demo-button\",\n            onClick: runSlowDemo,\n            disabled: isDemoRunning,\n            children: isDemoRunning ? 'Demo Running...' : 'Run 3000 Games Demo'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Win Statistics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thermometer-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thermometer-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"percentage-label\",\n                  children: [stats.total > 0 ? (stats.cfrWins / stats.total * 100).toFixed(1) : 0, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `thermometer ${stats.cfrWins >= stats.stupidWins ? 'green' : 'red'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"fill\",\n                    style: {\n                      height: `${stats.total > 0 ? stats.cfrWins / stats.total * 100 : 0}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 493,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bot-label\",\n                  children: \"CFR Bot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thermometer-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"percentage-label\",\n                  children: [stats.total > 0 ? (stats.stupidWins / stats.total * 100).toFixed(1) : 0, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 503,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `thermometer ${stats.stupidWins > stats.cfrWins ? 'green' : 'red'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"fill\",\n                    style: {\n                      height: `${stats.total > 0 ? stats.stupidWins / stats.total * 100 : 0}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 507,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bot-label\",\n                  children: \"Stupid Bot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-area\",\n          children: [/*#__PURE__*/_jsxDEV(PokerTable, {\n            gameHistory: gameHistory,\n            cards: cards,\n            onPlayClick: playGame,\n            isBotVsBot: isBotVsBot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), renderStrategyVisualization(), renderPayoffRegretChart()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-container\",\n          children: /*#__PURE__*/_jsxDEV(GameHistoryTable, {\n            history: gameHistory\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Kuhn Poker GTO Solver Implementation - CFR Bot vs Stupid Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WBlE40uLFHqe4cEp9LOQ1c7sTmI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PokerTable","GameHistoryTable","jsxDEV","_jsxDEV","App","_s","gameHistory","setGameHistory","cards","setCards","cfr","stupid","stats","setStats","cfrWins","stupidWins","total","isBotVsBot","setIsBotVsBot","numGames","setNumGames","isDemoRunning","setIsDemoRunning","strategyData","setStrategyData","payoffData","setPayoffData","regretData","setRegretData","iterationCount","setIterationCount","cfrStrategy","setCfrStrategy","regretSum","setRegretSum","getInfoSet","card","history","length","toString","lastAction","action","updateStrategy","newStrategy","Object","keys","forEach","infoSet","regrets","positiveRegrets","Math","max","sum","prevData","newData","push","iteration","strategy","slice","updateRegrets","actionTaken","payoff","prevRegrets","newRegrets","actionIndex","otherIndex","totalRegret","values","reduce","regretPair","abs","regret","playGame","dealtCards","shuffleArray","firstPlayer","random","secondPlayer","playRound","calculatePayoff","winner","determineWinner","prev","firstCard","secondCard","lastActions","firstAction","getCFRAction","player","secondAction","finalAction","array","i","j","floor","moves","runBotVsBot","runSlowDemo","totalGames","batchSize","infoSetForThird","Promise","resolve","setTimeout","renderStrategyVisualization","latestStrategy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","probabilities","description","passProb","round","betProb","style","width","renderPayoffRegretChart","totalPayoff","data","avgPayoff","toFixed","onClick","disabled","height","onPlayClick","_c","$RefreshReg$"],"sources":["/Users/vc/Desktop/仅作为副本/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PokerTable from './components/PokerTable';\nimport GameHistoryTable from './components/GameHistoryTable';\n\nfunction App() {\n  const [gameHistory, setGameHistory] = useState([]);\n  const [cards, setCards] = useState({ cfr: null, stupid: null });\n  const [stats, setStats] = useState({ cfrWins: 0, stupidWins: 0, total: 0 });\n  const [isBotVsBot, setIsBotVsBot] = useState(false);\n  const [numGames, setNumGames] = useState(1000);\n  const [isDemoRunning, setIsDemoRunning] = useState(false);\n  \n  // New state for tracking metrics\n  const [strategyData, setStrategyData] = useState([]);\n  const [payoffData, setPayoffData] = useState([]);\n  const [regretData, setRegretData] = useState([]);\n  const [iterationCount, setIterationCount] = useState(0);\n\n  // Keep track of CFR strategy\n  const [cfrStrategy, setCfrStrategy] = useState({\n    // Info sets with strategies [PASS probability, BET probability]\n    \"1\": [0.9, 0.1],     // Jack, first to act\n    \"2\": [0.5, 0.5],     // Queen, first to act\n    \"3\": [0.1, 0.9],     // King, first to act\n    \"1-bet\": [0.9, 0.1], // Jack after opponent bets\n    \"2-bet\": [0.4, 0.6], // Queen after opponent bets\n    \"3-bet\": [0.0, 1.0], // King after opponent bets\n    \"1-pass\": [0.8, 0.2], // Jack after opponent passes\n    \"2-pass\": [0.3, 0.7], // Queen after opponent passes\n    \"3-pass\": [0.0, 1.0]  // King after opponent passes\n  });\n\n  // Simple regret tracking\n  const [regretSum, setRegretSum] = useState({\n    \"1\": [0, 0],\n    \"2\": [0, 0],\n    \"3\": [0, 0],\n    \"1-bet\": [0, 0],\n    \"2-bet\": [0, 0],\n    \"3-bet\": [0, 0],\n    \"1-pass\": [0, 0],\n    \"2-pass\": [0, 0],\n    \"3-pass\": [0, 0]\n  });\n\n  // Get info set key based on card and history\n  const getInfoSet = (card, history) => {\n    if (history.length === 0) {\n      return card.toString();\n    }\n    \n    const lastAction = history[history.length - 1].action;\n    return `${card}-${lastAction}`;\n  };\n\n  // Update strategy based on regrets\n  const updateStrategy = () => {\n    const newStrategy = {};\n    \n    Object.keys(regretSum).forEach(infoSet => {\n      const regrets = regretSum[infoSet];\n      const positiveRegrets = [Math.max(0, regrets[0]), Math.max(0, regrets[1])];\n      const sum = positiveRegrets[0] + positiveRegrets[1];\n      \n      if (sum > 0) {\n        newStrategy[infoSet] = [positiveRegrets[0] / sum, positiveRegrets[1] / sum];\n      } else {\n        // Keep existing strategy if all regrets are negative\n        newStrategy[infoSet] = cfrStrategy[infoSet] || [0.5, 0.5];\n      }\n    });\n    \n    setCfrStrategy(newStrategy);\n    \n    // Add to strategy data for visualization\n    setStrategyData(prevData => {\n      const newData = [...prevData];\n      newData.push({\n        iteration: iterationCount,\n        strategy: { ...newStrategy }\n      });\n      \n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n  };\n\n  // Update regrets based on outcome\n  const updateRegrets = (infoSet, actionTaken, payoff) => {\n    const strategy = cfrStrategy[infoSet];\n    if (!strategy) return;\n    \n    setRegretSum(prevRegrets => {\n      const newRegrets = { ...prevRegrets };\n      const actionIndex = actionTaken === 'pass' ? 0 : 1;\n      const otherIndex = 1 - actionIndex;\n      \n      // Calculate counterfactual regret\n      // This is a simplified model - real CFR is more complex\n      newRegrets[infoSet] = [...newRegrets[infoSet]];\n      newRegrets[infoSet][otherIndex] += payoff * (1 - strategy[actionIndex]);\n      \n      return newRegrets;\n    });\n    \n    // Add to regret data for visualization\n    setRegretData(prevData => {\n      const newData = [...prevData];\n      const totalRegret = Object.values(regretSum).reduce(\n        (sum, regretPair) => sum + Math.abs(regretPair[0]) + Math.abs(regretPair[1]), \n        0\n      );\n      \n      newData.push({\n        iteration: iterationCount,\n        regret: totalRegret\n      });\n      \n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n  };\n\n  const playGame = () => {\n    // Clear previous game history\n    setGameHistory([]);\n    \n    // Deal cards\n    const dealtCards = [1, 2, 3];\n    shuffleArray(dealtCards);\n    \n    // Randomly decide who goes first\n    const firstPlayer = Math.random() > 0.5 ? 'cfr' : 'stupid';\n    const secondPlayer = firstPlayer === 'cfr' ? 'stupid' : 'cfr';\n    \n    // Assign cards\n    setCards({\n      cfr: firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1],\n      stupid: firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]\n    });\n    \n    // Play the game\n    const history = playRound(firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    setGameHistory(history);\n    \n    // Calculate payoff\n    const payoff = calculatePayoff(history, firstPlayer, dealtCards[0], dealtCards[1]);\n    \n    // Add to payoff data for visualization\n    setPayoffData(prevData => {\n      const newData = [...prevData];\n      newData.push({\n        iteration: iterationCount,\n        payoff: payoff\n      });\n      \n      // Keep only the last 50 data points for performance\n      if (newData.length > 50) {\n        return newData.slice(newData.length - 50);\n      }\n      return newData;\n    });\n    \n    // Update stats\n    const winner = determineWinner(history, firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    if (winner === 'cfr') {\n      setStats(prev => ({ ...prev, cfrWins: prev.cfrWins + 1, total: prev.total + 1 }));\n    } else if (winner === 'stupid') {\n      setStats(prev => ({ ...prev, stupidWins: prev.stupidWins + 1, total: prev.total + 1 }));\n    }\n    \n    // Update iteration count\n    setIterationCount(prev => prev + 1);\n    \n    // After each game, update the strategy based on accumulated regrets\n    updateStrategy();\n    \n    return { history, winner, payoff };\n  };\n\n  const calculatePayoff = (history, firstPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return 0;\n    \n    let payoff = 0;\n    const lastActions = history.slice(-2);\n    \n    if (lastActions[0].action === 'pass' && lastActions[1].action === 'pass') {\n      // Both pass - higher card wins 1\n      payoff = firstCard > secondCard ? 1 : -1;\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'pass') {\n      // First bets, second passes - betting player wins 1\n      payoff = 1;\n    } else if (lastActions[0].action === 'pass' && lastActions[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        // Player 1 passes, Player 2 bets, Player 1 passes again - Player 2 wins 1\n        payoff = -1;\n      } else if (history.length > 2 && history[2].action === 'bet') {\n        // Both bet after pass - higher card wins 2\n        payoff = firstCard > secondCard ? 2 : -2;\n      }\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'bet') {\n      // Both bet - higher card wins 2\n      payoff = firstCard > secondCard ? 2 : -2;\n    }\n    \n    // If CFR is the second player, flip the payoff\n    return firstPlayer === 'cfr' ? payoff : -payoff;\n  };\n\n  const playRound = (firstPlayer, secondPlayer, firstCard, secondCard) => {\n    const history = [];\n    \n    // First player's action\n    const firstAction = firstPlayer === 'cfr' \n      ? getCFRAction(firstCard, history) \n      : 'bet'; // Stupid bot always bets\n    history.push({ player: firstPlayer, action: firstAction });\n    \n    // Second player's action\n    const secondAction = secondPlayer === 'cfr' \n      ? getCFRAction(secondCard, history) \n      : 'bet'; // Stupid bot always bets\n    history.push({ player: secondPlayer, action: secondAction });\n    \n    // If first player passed and second player bet, first player gets chance to call\n    if (firstAction === 'pass' && secondAction === 'bet') {\n      const finalAction = firstPlayer === 'cfr' \n        ? getCFRAction(firstCard, history) \n        : 'bet'; // Stupid bot always bets\n      history.push({ player: firstPlayer, action: finalAction });\n    }\n    \n    return history;\n  };\n\n  const getCFRAction = (card, history) => {\n    const infoSet = getInfoSet(card, history);\n    const strategy = cfrStrategy[infoSet] || [0.5, 0.5];\n    \n    // Sample action based on strategy probabilities\n    const random = Math.random();\n    const action = random < strategy[0] ? 'pass' : 'bet';\n    \n    // Later, we'll update regrets based on the outcome\n    // This is handled after the game is complete\n    \n    return action;\n  };\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const determineWinner = (history, firstPlayer, secondPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return null;\n\n    const moves = history.slice(-2);\n    \n    // Both pass\n    if (moves[0].action === 'pass' && moves[1].action === 'pass') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    // First bets, second passes\n    if (moves[0].action === 'bet' && moves[1].action === 'pass') {\n      return firstPlayer;\n    }\n    \n    // First passes, second bets\n    if (moves[0].action === 'pass' && moves[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        return secondPlayer;\n      }\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    // Both bet\n    if (moves[0].action === 'bet' && moves[1].action === 'bet') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    return null;\n  };\n\n  const runBotVsBot = () => {\n    setIsBotVsBot(true);\n    setStats({ cfrWins: 0, stupidWins: 0, total: 0 });\n    \n    for (let i = 0; i < numGames; i++) {\n      playGame();\n    }\n  };\n\n  const runSlowDemo = async () => {\n    setIsDemoRunning(true);\n    setIsBotVsBot(true);\n    setStats({ cfrWins: 0, stupidWins: 0, total: 0 });\n    setGameHistory([]);\n    setIterationCount(0);\n    \n    // Reset strategy and regret tracking\n    setCfrStrategy({\n      \"1\": [0.5, 0.5],\n      \"2\": [0.5, 0.5],\n      \"3\": [0.5, 0.5],\n      \"1-bet\": [0.5, 0.5],\n      \"2-bet\": [0.5, 0.5],\n      \"3-bet\": [0.5, 0.5],\n      \"1-pass\": [0.5, 0.5],\n      \"2-pass\": [0.5, 0.5],\n      \"3-pass\": [0.5, 0.5]\n    });\n    \n    setRegretSum({\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"1-bet\": [0, 0],\n      \"2-bet\": [0, 0],\n      \"3-bet\": [0, 0],\n      \"1-pass\": [0, 0],\n      \"2-pass\": [0, 0],\n      \"3-pass\": [0, 0]\n    });\n    \n    setStrategyData([]);\n    setPayoffData([]);\n    setRegretData([]);\n\n    // Play 3000 games with small batches to keep UI responsive\n    const totalGames = 3000;\n    const batchSize = 50;\n    \n    for (let i = 0; i < totalGames; i += batchSize) {\n      // Process a batch of games\n      for (let j = 0; j < batchSize && i + j < totalGames; j++) {\n        const { history, payoff } = playGame();\n        \n        // Update regrets for CFR player's actions in this game\n        if (history.length >= 2) {\n          const firstPlayer = history[0].player;\n          const card = cards[firstPlayer === 'cfr' ? 'cfr' : 'stupid'];\n          \n          if (firstPlayer === 'cfr') {\n            // Update regret for first action\n            const infoSet = getInfoSet(card, []);\n            updateRegrets(infoSet, history[0].action, payoff);\n            \n            // If there was a third action by CFR\n            if (history.length > 2 && history[0].player === 'cfr') {\n              const infoSetForThird = getInfoSet(card, [history[1]]);\n              updateRegrets(infoSetForThird, history[2].action, payoff);\n            }\n          } else {\n            // CFR was second to act\n            const infoSet = getInfoSet(card, [history[0]]);\n            updateRegrets(infoSet, history[1].action, payoff);\n          }\n        }\n      }\n      \n      // Small delay between batches to allow UI updates\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    \n    setIsDemoRunning(false);\n  };\n\n  // Render strategy and payoff charts\n  const renderStrategyVisualization = () => {\n    if (strategyData.length === 0) return null;\n    \n    const latestStrategy = strategyData[strategyData.length - 1].strategy;\n    \n    return (\n      <div className=\"strategy-visualization\">\n        <h3>Current CFR Strategy (Iteration {iterationCount})</h3>\n        <div className=\"strategy-grid\">\n          {Object.entries(latestStrategy).map(([infoSet, probabilities]) => {\n            let description;\n            if (infoSet === \"1\") description = \"Jack (First)\";\n            else if (infoSet === \"2\") description = \"Queen (First)\";\n            else if (infoSet === \"3\") description = \"King (First)\";\n            else if (infoSet === \"1-bet\") description = \"Jack (After Bet)\";\n            else if (infoSet === \"2-bet\") description = \"Queen (After Bet)\";\n            else if (infoSet === \"3-bet\") description = \"King (After Bet)\";\n            else if (infoSet === \"1-pass\") description = \"Jack (After Pass)\";\n            else if (infoSet === \"2-pass\") description = \"Queen (After Pass)\";\n            else if (infoSet === \"3-pass\") description = \"King (After Pass)\";\n            else description = infoSet;\n            \n            const passProb = Math.round(probabilities[0] * 100);\n            const betProb = Math.round(probabilities[1] * 100);\n            \n            return (\n              <div key={infoSet} className=\"strategy-card\">\n                <div className=\"info-set\">{description}</div>\n                <div className=\"probabilities\">\n                  <div className=\"probability-bar\">\n                    <div className=\"pass-prob\" style={{width: `${passProb}%`}}></div>\n                    <div className=\"bet-prob\" style={{width: `${betProb}%`}}></div>\n                  </div>\n                  <div className=\"probability-labels\">\n                    <span className=\"pass-label\">Pass: {passProb}%</span>\n                    <span className=\"bet-label\">Bet: {betProb}%</span>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const renderPayoffRegretChart = () => {\n    if (payoffData.length === 0) return null;\n    \n    // For now just display the average payoff\n    const totalPayoff = payoffData.reduce((sum, data) => sum + data.payoff, 0);\n    const avgPayoff = totalPayoff / payoffData.length;\n    \n    // Calculate total regret\n    const totalRegret = Object.values(regretSum).reduce(\n      (sum, regretPair) => sum + Math.abs(regretPair[0]) + Math.abs(regretPair[1]), \n      0\n    );\n    \n    return (\n      <div className=\"metrics-visualization\">\n        <h3>Performance Metrics</h3>\n        <div className=\"metrics-grid\">\n          <div className=\"metric-card\">\n            <div className=\"metric-title\">Average Payoff</div>\n            <div className=\"metric-value\">{avgPayoff.toFixed(3)}</div>\n          </div>\n          <div className=\"metric-card\">\n            <div className=\"metric-title\">Total Regret</div>\n            <div className=\"metric-value\">{totalRegret.toFixed(3)}</div>\n          </div>\n          <div className=\"metric-card\">\n            <div className=\"metric-title\">Iterations</div>\n            <div className=\"metric-value\">{iterationCount}</div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Kuhn Poker: CFR Bot vs Stupid Bot</h1>\n        <p>Visualization of CFR learning over iterations</p>\n      </header>\n\n      <main className=\"main-content\">\n        <div className=\"game-container\">\n          <div className=\"game-controls\">\n            <button \n              className=\"button-primary\" \n              onClick={playGame}\n              disabled={isDemoRunning}\n            >\n              Play Single Game\n            </button>\n            <button \n              className=\"button-primary demo-button\" \n              onClick={runSlowDemo}\n              disabled={isDemoRunning}\n            >\n              {isDemoRunning ? 'Demo Running...' : 'Run 3000 Games Demo'}\n            </button>\n            <div className=\"stats-container\">\n              <h3>Win Statistics</h3>\n              <div className=\"thermometer-wrapper\">\n                {/* CFR BOT */}\n                <div className=\"thermometer-group\">\n                  <div className=\"percentage-label\">\n                    {stats.total > 0 ? (stats.cfrWins / stats.total * 100).toFixed(1) : 0}%\n                  </div>\n                  <div className={`thermometer ${stats.cfrWins >= stats.stupidWins ? 'green' : 'red'}`}>\n                    <div\n                      className=\"fill\"\n                      style={{ height: `${stats.total > 0 ? (stats.cfrWins / stats.total) * 100 : 0}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"bot-label\">CFR Bot</div>\n                </div>\n\n                {/* STUPID BOT */}\n                <div className=\"thermometer-group\">\n                  <div className=\"percentage-label\">\n                    {stats.total > 0 ? (stats.stupidWins / stats.total * 100).toFixed(1) : 0}%\n                  </div>\n                  <div className={`thermometer ${stats.stupidWins > stats.cfrWins ? 'green' : 'red'}`}>\n                    <div\n                      className=\"fill\"\n                      style={{ height: `${stats.total > 0 ? (stats.stupidWins / stats.total) * 100 : 0}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"bot-label\">Stupid Bot</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"game-area\">\n            <PokerTable \n              gameHistory={gameHistory}\n              cards={cards}\n              onPlayClick={playGame}\n              isBotVsBot={isBotVsBot}\n            />\n            \n            {/* Strategy and Metrics Visualizations */}\n            {renderStrategyVisualization()}\n            {renderPayoffRegretChart()}\n          </div>\n\n          <div className=\"analysis-container\">\n            <GameHistoryTable history={gameHistory} />\n          </div>\n        </div>\n      </main>\n\n      <footer>\n        <p>Kuhn Poker GTO Solver Implementation - CFR Bot vs Stupid Bot</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}