{"ast":null,"code":"var _jsxFileName = \"/Users/vc/Desktop/\\u4EC5\\u4F5C\\u4E3A\\u526F\\u672C/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PokerTable from './components/PokerTable';\nimport GameHistoryTable from './components/GameHistoryTable';\nimport StrategyVisualizer from './components/StrategyVisualizer';\nimport PayoffRegretChart from './components/PayoffRegretChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameHistory, setGameHistory] = useState([]);\n  const [cards, setCards] = useState({\n    cfr: null,\n    stupid: null\n  });\n  const [stats, setStats] = useState({\n    cfrWins: 0,\n    stupidWins: 0,\n    total: 0\n  });\n  const [isBotVsBot, setIsBotVsBot] = useState(false);\n  const [numGames, setNumGames] = useState(1000);\n  const [isDemoRunning, setIsDemoRunning] = useState(false);\n\n  // New state for tracking CFR data over iterations\n  const [iterationData, setIterationData] = useState({\n    iterations: [],\n    strategies: {\n      // Info sets for Kuhn poker with strategies [PASS, BET]\n      \"1:\": [0.5, 0.5],\n      // Jack, first to act\n      \"2:\": [0.5, 0.5],\n      // Queen, first to act\n      \"3:\": [0.5, 0.5],\n      // King, first to act\n      \"1:BET\": [0.5, 0.5],\n      // Jack after opponent bets\n      \"2:BET\": [0.5, 0.5],\n      // Queen after opponent bets\n      \"3:BET\": [0.5, 0.5],\n      // King after opponent bets\n      \"1:PASS\": [0.5, 0.5],\n      // Jack after opponent passes\n      \"2:PASS\": [0.5, 0.5],\n      // Queen after opponent passes\n      \"3:PASS\": [0.5, 0.5] // King after opponent passes\n    },\n    expectedPayoffs: [],\n    regrets: {\n      \"1:\": [0, 0],\n      \"2:\": [0, 0],\n      \"3:\": [0, 0],\n      \"1:BET\": [0, 0],\n      \"2:BET\": [0, 0],\n      \"3:BET\": [0, 0],\n      \"1:PASS\": [0, 0],\n      \"2:PASS\": [0, 0],\n      \"3:PASS\": [0, 0]\n    },\n    regretSum: []\n  });\n\n  // CFR Implementation functions\n  const getInfoSet = (card, history) => {\n    return `${card}:${history.map(h => h.action.toUpperCase()).join(':')}`;\n  };\n  const getStrategy = infoSet => {\n    const currentRegrets = iterationData.regrets[infoSet] || [0, 0];\n    const positiveRegrets = [Math.max(0, currentRegrets[0]), Math.max(0, currentRegrets[1])];\n    const sum = positiveRegrets[0] + positiveRegrets[1];\n    if (sum > 0) {\n      return [positiveRegrets[0] / sum, positiveRegrets[1] / sum];\n    } else {\n      return [0.5, 0.5]; // Default to uniform strategy\n    }\n  };\n  const updateRegrets = (infoSet, actionIndex, regretValue) => {\n    const currentRegrets = [...(iterationData.regrets[infoSet] || [0, 0])];\n    currentRegrets[actionIndex] += regretValue;\n    setIterationData(prev => ({\n      ...prev,\n      regrets: {\n        ...prev.regrets,\n        [infoSet]: currentRegrets\n      }\n    }));\n  };\n  const calculateExpectedPayoff = (history, firstCard, secondCard) => {\n    // Simple payoff calculation for Kuhn poker\n    if (history.length < 2) return 0;\n    let payoff = 0;\n    const lastActions = history.slice(-2);\n    if (lastActions[0].action === 'pass' && lastActions[1].action === 'pass') {\n      // Both pass - higher card wins 1\n      payoff = firstCard > secondCard ? 1 : -1;\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'pass') {\n      // First bets, second passes - betting player wins 1\n      payoff = 1;\n    } else if (lastActions[0].action === 'pass' && lastActions[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        // Player 1 passes, Player 2 bets, Player 1 passes again - Player 2 wins 1\n        payoff = -1;\n      } else if (history.length > 2 && history[2].action === 'bet') {\n        // Both bet after pass - higher card wins 2\n        payoff = firstCard > secondCard ? 2 : -2;\n      }\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'bet') {\n      // Both bet - higher card wins 2\n      payoff = firstCard > secondCard ? 2 : -2;\n    }\n    return payoff;\n  };\n  const playGame = () => {\n    // Clear previous game history\n    setGameHistory([]);\n\n    // Deal cards\n    const dealtCards = [1, 2, 3];\n    shuffleArray(dealtCards);\n\n    // Randomly decide who goes first\n    const firstPlayer = Math.random() > 0.5 ? 'cfr' : 'stupid';\n    const secondPlayer = firstPlayer === 'cfr' ? 'stupid' : 'cfr';\n\n    // Assign cards\n    const newCards = {\n      cfr: firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1],\n      stupid: firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]\n    };\n    setCards(newCards);\n\n    // Play the game\n    const history = playRound(firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    setGameHistory(history);\n\n    // Calculate payoff\n    const payoff = calculateExpectedPayoff(history, firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1], firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]);\n\n    // Update stats\n    const winner = determineWinner(history, firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    if (winner === 'cfr') {\n      setStats(prev => ({\n        ...prev,\n        cfrWins: prev.cfrWins + 1,\n        total: prev.total + 1\n      }));\n    } else if (winner === 'stupid') {\n      setStats(prev => ({\n        ...prev,\n        stupidWins: prev.stupidWins + 1,\n        total: prev.total + 1\n      }));\n    }\n\n    // Update expected payoff\n    setIterationData(prev => {\n      const newIterations = [...prev.iterations, prev.iterations.length + 1];\n      const newExpectedPayoffs = [...prev.expectedPayoffs, payoff];\n      const newRegretSum = [...prev.regretSum];\n\n      // Calculate total regret for this iteration\n      let totalRegret = 0;\n      Object.values(prev.regrets).forEach(regretPair => {\n        totalRegret += Math.abs(regretPair[0]) + Math.abs(regretPair[1]);\n      });\n      newRegretSum.push(totalRegret);\n\n      // Update strategies based on regrets\n      const newStrategies = {\n        ...prev.strategies\n      };\n      Object.keys(prev.regrets).forEach(infoSet => {\n        newStrategies[infoSet] = getStrategy(infoSet);\n      });\n      return {\n        ...prev,\n        iterations: newIterations,\n        expectedPayoffs: newExpectedPayoffs,\n        regretSum: newRegretSum,\n        strategies: newStrategies\n      };\n    });\n    return {\n      history,\n      winner,\n      payoff\n    };\n  };\n  const playRound = (firstPlayer, secondPlayer, firstCard, secondCard) => {\n    const history = [];\n\n    // First player's action\n    const firstAction = firstPlayer === 'cfr' ? getCFRAction(firstCard, history, firstPlayer) : 'bet'; // Stupid bot always bets\n    history.push({\n      player: firstPlayer,\n      action: firstAction\n    });\n\n    // Second player's action\n    const secondAction = secondPlayer === 'cfr' ? getCFRAction(secondCard, history, secondPlayer) : 'bet'; // Stupid bot always bets\n    history.push({\n      player: secondPlayer,\n      action: secondAction\n    });\n\n    // If first player passed and second player bet, first player gets chance to call\n    if (firstAction === 'pass' && secondAction === 'bet') {\n      const finalAction = firstPlayer === 'cfr' ? getCFRAction(firstCard, history, firstPlayer) : 'bet'; // Stupid bot always bets\n      history.push({\n        player: firstPlayer,\n        action: finalAction\n      });\n    }\n    return history;\n  };\n  const getCFRAction = (card, history, player) => {\n    const infoSet = getInfoSet(card, history);\n    const strategy = iterationData.strategies[infoSet] || [0.5, 0.5];\n\n    // Sample action based on strategy probabilities\n    const random = Math.random();\n    const action = random < strategy[0] ? 'pass' : 'bet';\n\n    // After the action is taken, we need to update regrets\n    // This is simplified regret update logic for demo purposes\n    if (player === 'cfr') {\n      // Calculate counterfactual values for PASS and BET\n      const passValue = action === 'pass' ? 1 : 0;\n      const betValue = action === 'bet' ? 1 : 0;\n\n      // Update regrets (in a real CFR implementation, this would be more complex)\n      updateRegrets(infoSet, 0, passValue - betValue); // Regret for PASS\n      updateRegrets(infoSet, 1, betValue - passValue); // Regret for BET\n    }\n    return action;\n  };\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  const determineWinner = (history, firstPlayer, secondPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return null;\n    const moves = history.slice(-2);\n\n    // Both pass\n    if (moves[0].action === 'pass' && moves[1].action === 'pass') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n\n    // First bets, second passes\n    if (moves[0].action === 'bet' && moves[1].action === 'pass') {\n      return firstPlayer;\n    }\n\n    // First passes, second bets\n    if (moves[0].action === 'pass' && moves[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        return secondPlayer;\n      }\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n\n    // Both bet\n    if (moves[0].action === 'bet' && moves[1].action === 'bet') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    return null;\n  };\n  const runBotVsBot = () => {\n    setIsBotVsBot(true);\n    setStats({\n      cfrWins: 0,\n      stupidWins: 0,\n      total: 0\n    });\n    for (let i = 0; i < numGames; i++) {\n      playGame();\n    }\n  };\n  const runSlowDemo = async () => {\n    setIsDemoRunning(true);\n    setIsBotVsBot(true);\n    setStats({\n      cfrWins: 0,\n      stupidWins: 0,\n      total: 0\n    });\n    setGameHistory([]);\n\n    // Reset iteration data\n    setIterationData({\n      iterations: [],\n      strategies: {\n        \"1:\": [0.5, 0.5],\n        \"2:\": [0.5, 0.5],\n        \"3:\": [0.5, 0.5],\n        \"1:BET\": [0.5, 0.5],\n        \"2:BET\": [0.5, 0.5],\n        \"3:BET\": [0.5, 0.5],\n        \"1:PASS\": [0.5, 0.5],\n        \"2:PASS\": [0.5, 0.5],\n        \"3:PASS\": [0.5, 0.5]\n      },\n      expectedPayoffs: [],\n      regrets: {\n        \"1:\": [0, 0],\n        \"2:\": [0, 0],\n        \"3:\": [0, 0],\n        \"1:BET\": [0, 0],\n        \"2:BET\": [0, 0],\n        \"3:BET\": [0, 0],\n        \"1:PASS\": [0, 0],\n        \"2:PASS\": [0, 0],\n        \"3:PASS\": [0, 0]\n      },\n      regretSum: []\n    });\n\n    // Play 3000 games with 1ms delay between each (to avoid freezing UI)\n    const totalGames = 3000;\n    const batchSize = 50; // Process in batches to update UI\n\n    for (let i = 0; i < totalGames; i += batchSize) {\n      // Process a batch of games\n      for (let j = 0; j < batchSize && i + j < totalGames; j++) {\n        playGame();\n      }\n\n      // Small delay between batches to allow UI updates\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    setIsDemoRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kuhn Poker: CFR Bot vs Stupid Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Visualization of CFR learning over 3000 iterations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-primary\",\n            onClick: playGame,\n            disabled: isDemoRunning,\n            children: \"Play Single Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-primary demo-button\",\n            onClick: runSlowDemo,\n            disabled: isDemoRunning,\n            children: isDemoRunning ? 'Demo Running...' : 'Run 3000 Games Demo'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Win Statistics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thermometer-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thermometer-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"percentage-label\",\n                  children: [stats.total > 0 ? (stats.cfrWins / stats.total * 100).toFixed(1) : 0, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `thermometer ${stats.cfrWins >= stats.stupidWins ? 'green' : 'red'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"fill\",\n                    style: {\n                      height: `${stats.total > 0 ? stats.cfrWins / stats.total * 100 : 0}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bot-label\",\n                  children: \"CFR Bot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thermometer-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"percentage-label\",\n                  children: [stats.total > 0 ? (stats.stupidWins / stats.total * 100).toFixed(1) : 0, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `thermometer ${stats.stupidWins > stats.cfrWins ? 'green' : 'red'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"fill\",\n                    style: {\n                      height: `${stats.total > 0 ? stats.stupidWins / stats.total * 100 : 0}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bot-label\",\n                  children: \"Stupid Bot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-area\",\n          children: [/*#__PURE__*/_jsxDEV(PokerTable, {\n            gameHistory: gameHistory,\n            cards: cards,\n            onPlayClick: playGame,\n            isBotVsBot: isBotVsBot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"visualization-container\",\n            children: [/*#__PURE__*/_jsxDEV(StrategyVisualizer, {\n              strategies: iterationData.strategies\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PayoffRegretChart, {\n              iterations: iterationData.iterations,\n              payoffs: iterationData.expectedPayoffs,\n              regrets: iterationData.regretSum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-container\",\n          children: /*#__PURE__*/_jsxDEV(GameHistoryTable, {\n            history: gameHistory\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Kuhn Poker GTO Solver Implementation - CFR Bot vs Stupid Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Zaafs1lCEz7uunzAMCmidrPpIE8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PokerTable","GameHistoryTable","StrategyVisualizer","PayoffRegretChart","jsxDEV","_jsxDEV","App","_s","gameHistory","setGameHistory","cards","setCards","cfr","stupid","stats","setStats","cfrWins","stupidWins","total","isBotVsBot","setIsBotVsBot","numGames","setNumGames","isDemoRunning","setIsDemoRunning","iterationData","setIterationData","iterations","strategies","expectedPayoffs","regrets","regretSum","getInfoSet","card","history","map","h","action","toUpperCase","join","getStrategy","infoSet","currentRegrets","positiveRegrets","Math","max","sum","updateRegrets","actionIndex","regretValue","prev","calculateExpectedPayoff","firstCard","secondCard","length","payoff","lastActions","slice","playGame","dealtCards","shuffleArray","firstPlayer","random","secondPlayer","newCards","playRound","winner","determineWinner","newIterations","newExpectedPayoffs","newRegretSum","totalRegret","Object","values","forEach","regretPair","abs","push","newStrategies","keys","firstAction","getCFRAction","player","secondAction","finalAction","strategy","passValue","betValue","array","i","j","floor","moves","runBotVsBot","runSlowDemo","totalGames","batchSize","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toFixed","style","height","onPlayClick","payoffs","_c","$RefreshReg$"],"sources":["/Users/vc/Desktop/仅作为副本/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PokerTable from './components/PokerTable';\nimport GameHistoryTable from './components/GameHistoryTable';\nimport StrategyVisualizer from './components/StrategyVisualizer';\nimport PayoffRegretChart from './components/PayoffRegretChart';\n\nfunction App() {\n  const [gameHistory, setGameHistory] = useState([]);\n  const [cards, setCards] = useState({ cfr: null, stupid: null });\n  const [stats, setStats] = useState({ cfrWins: 0, stupidWins: 0, total: 0 });\n  const [isBotVsBot, setIsBotVsBot] = useState(false);\n  const [numGames, setNumGames] = useState(1000);\n  const [isDemoRunning, setIsDemoRunning] = useState(false);\n  \n  // New state for tracking CFR data over iterations\n  const [iterationData, setIterationData] = useState({\n    iterations: [],\n    strategies: {\n      // Info sets for Kuhn poker with strategies [PASS, BET]\n      \"1:\": [0.5, 0.5],     // Jack, first to act\n      \"2:\": [0.5, 0.5],     // Queen, first to act\n      \"3:\": [0.5, 0.5],     // King, first to act\n      \"1:BET\": [0.5, 0.5],  // Jack after opponent bets\n      \"2:BET\": [0.5, 0.5],  // Queen after opponent bets\n      \"3:BET\": [0.5, 0.5],  // King after opponent bets\n      \"1:PASS\": [0.5, 0.5], // Jack after opponent passes\n      \"2:PASS\": [0.5, 0.5], // Queen after opponent passes\n      \"3:PASS\": [0.5, 0.5], // King after opponent passes\n    },\n    expectedPayoffs: [],\n    regrets: {\n      \"1:\": [0, 0],     \n      \"2:\": [0, 0],     \n      \"3:\": [0, 0],     \n      \"1:BET\": [0, 0],  \n      \"2:BET\": [0, 0],  \n      \"3:BET\": [0, 0],  \n      \"1:PASS\": [0, 0], \n      \"2:PASS\": [0, 0], \n      \"3:PASS\": [0, 0], \n    },\n    regretSum: [],\n  });\n\n  // CFR Implementation functions\n  const getInfoSet = (card, history) => {\n    return `${card}:${history.map(h => h.action.toUpperCase()).join(':')}`;\n  };\n\n  const getStrategy = (infoSet) => {\n    const currentRegrets = iterationData.regrets[infoSet] || [0, 0];\n    const positiveRegrets = [Math.max(0, currentRegrets[0]), Math.max(0, currentRegrets[1])];\n    \n    const sum = positiveRegrets[0] + positiveRegrets[1];\n    if (sum > 0) {\n      return [positiveRegrets[0] / sum, positiveRegrets[1] / sum];\n    } else {\n      return [0.5, 0.5]; // Default to uniform strategy\n    }\n  };\n\n  const updateRegrets = (infoSet, actionIndex, regretValue) => {\n    const currentRegrets = [...(iterationData.regrets[infoSet] || [0, 0])];\n    currentRegrets[actionIndex] += regretValue;\n    \n    setIterationData(prev => ({\n      ...prev,\n      regrets: {\n        ...prev.regrets,\n        [infoSet]: currentRegrets\n      }\n    }));\n  };\n\n  const calculateExpectedPayoff = (history, firstCard, secondCard) => {\n    // Simple payoff calculation for Kuhn poker\n    if (history.length < 2) return 0;\n    \n    let payoff = 0;\n    const lastActions = history.slice(-2);\n    \n    if (lastActions[0].action === 'pass' && lastActions[1].action === 'pass') {\n      // Both pass - higher card wins 1\n      payoff = firstCard > secondCard ? 1 : -1;\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'pass') {\n      // First bets, second passes - betting player wins 1\n      payoff = 1;\n    } else if (lastActions[0].action === 'pass' && lastActions[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        // Player 1 passes, Player 2 bets, Player 1 passes again - Player 2 wins 1\n        payoff = -1;\n      } else if (history.length > 2 && history[2].action === 'bet') {\n        // Both bet after pass - higher card wins 2\n        payoff = firstCard > secondCard ? 2 : -2;\n      }\n    } else if (lastActions[0].action === 'bet' && lastActions[1].action === 'bet') {\n      // Both bet - higher card wins 2\n      payoff = firstCard > secondCard ? 2 : -2;\n    }\n    \n    return payoff;\n  };\n\n  const playGame = () => {\n    // Clear previous game history\n    setGameHistory([]);\n    \n    // Deal cards\n    const dealtCards = [1, 2, 3];\n    shuffleArray(dealtCards);\n    \n    // Randomly decide who goes first\n    const firstPlayer = Math.random() > 0.5 ? 'cfr' : 'stupid';\n    const secondPlayer = firstPlayer === 'cfr' ? 'stupid' : 'cfr';\n    \n    // Assign cards\n    const newCards = {\n      cfr: firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1],\n      stupid: firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]\n    };\n    setCards(newCards);\n    \n    // Play the game\n    const history = playRound(firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    setGameHistory(history);\n    \n    // Calculate payoff\n    const payoff = calculateExpectedPayoff(\n      history, \n      firstPlayer === 'cfr' ? dealtCards[0] : dealtCards[1],\n      firstPlayer === 'stupid' ? dealtCards[0] : dealtCards[1]\n    );\n    \n    // Update stats\n    const winner = determineWinner(history, firstPlayer, secondPlayer, dealtCards[0], dealtCards[1]);\n    if (winner === 'cfr') {\n      setStats(prev => ({ ...prev, cfrWins: prev.cfrWins + 1, total: prev.total + 1 }));\n    } else if (winner === 'stupid') {\n      setStats(prev => ({ ...prev, stupidWins: prev.stupidWins + 1, total: prev.total + 1 }));\n    }\n    \n    // Update expected payoff\n    setIterationData(prev => {\n      const newIterations = [...prev.iterations, prev.iterations.length + 1];\n      const newExpectedPayoffs = [...prev.expectedPayoffs, payoff];\n      const newRegretSum = [...prev.regretSum];\n      \n      // Calculate total regret for this iteration\n      let totalRegret = 0;\n      Object.values(prev.regrets).forEach(regretPair => {\n        totalRegret += Math.abs(regretPair[0]) + Math.abs(regretPair[1]);\n      });\n      \n      newRegretSum.push(totalRegret);\n      \n      // Update strategies based on regrets\n      const newStrategies = { ...prev.strategies };\n      Object.keys(prev.regrets).forEach(infoSet => {\n        newStrategies[infoSet] = getStrategy(infoSet);\n      });\n      \n      return {\n        ...prev,\n        iterations: newIterations,\n        expectedPayoffs: newExpectedPayoffs,\n        regretSum: newRegretSum,\n        strategies: newStrategies\n      };\n    });\n    \n    return { history, winner, payoff };\n  };\n\n  const playRound = (firstPlayer, secondPlayer, firstCard, secondCard) => {\n    const history = [];\n    \n    // First player's action\n    const firstAction = firstPlayer === 'cfr' \n      ? getCFRAction(firstCard, history, firstPlayer) \n      : 'bet'; // Stupid bot always bets\n    history.push({ player: firstPlayer, action: firstAction });\n    \n    // Second player's action\n    const secondAction = secondPlayer === 'cfr' \n      ? getCFRAction(secondCard, history, secondPlayer) \n      : 'bet'; // Stupid bot always bets\n    history.push({ player: secondPlayer, action: secondAction });\n    \n    // If first player passed and second player bet, first player gets chance to call\n    if (firstAction === 'pass' && secondAction === 'bet') {\n      const finalAction = firstPlayer === 'cfr' \n        ? getCFRAction(firstCard, history, firstPlayer) \n        : 'bet'; // Stupid bot always bets\n      history.push({ player: firstPlayer, action: finalAction });\n    }\n    \n    return history;\n  };\n\n  const getCFRAction = (card, history, player) => {\n    const infoSet = getInfoSet(card, history);\n    const strategy = iterationData.strategies[infoSet] || [0.5, 0.5];\n    \n    // Sample action based on strategy probabilities\n    const random = Math.random();\n    const action = random < strategy[0] ? 'pass' : 'bet';\n    \n    // After the action is taken, we need to update regrets\n    // This is simplified regret update logic for demo purposes\n    if (player === 'cfr') {\n      // Calculate counterfactual values for PASS and BET\n      const passValue = action === 'pass' ? 1 : 0;\n      const betValue = action === 'bet' ? 1 : 0;\n      \n      // Update regrets (in a real CFR implementation, this would be more complex)\n      updateRegrets(infoSet, 0, passValue - betValue); // Regret for PASS\n      updateRegrets(infoSet, 1, betValue - passValue); // Regret for BET\n    }\n    \n    return action;\n  };\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const determineWinner = (history, firstPlayer, secondPlayer, firstCard, secondCard) => {\n    if (history.length < 2) return null;\n\n    const moves = history.slice(-2);\n    \n    // Both pass\n    if (moves[0].action === 'pass' && moves[1].action === 'pass') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    // First bets, second passes\n    if (moves[0].action === 'bet' && moves[1].action === 'pass') {\n      return firstPlayer;\n    }\n    \n    // First passes, second bets\n    if (moves[0].action === 'pass' && moves[1].action === 'bet') {\n      if (history.length > 2 && history[2].action === 'pass') {\n        return secondPlayer;\n      }\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    // Both bet\n    if (moves[0].action === 'bet' && moves[1].action === 'bet') {\n      return firstCard > secondCard ? firstPlayer : secondPlayer;\n    }\n    \n    return null;\n  };\n\n  const runBotVsBot = () => {\n    setIsBotVsBot(true);\n    setStats({ cfrWins: 0, stupidWins: 0, total: 0 });\n    \n    for (let i = 0; i < numGames; i++) {\n      playGame();\n    }\n  };\n\n  const runSlowDemo = async () => {\n    setIsDemoRunning(true);\n    setIsBotVsBot(true);\n    setStats({ cfrWins: 0, stupidWins: 0, total: 0 });\n    setGameHistory([]);\n    \n    // Reset iteration data\n    setIterationData({\n      iterations: [],\n      strategies: {\n        \"1:\": [0.5, 0.5],     \n        \"2:\": [0.5, 0.5],     \n        \"3:\": [0.5, 0.5],     \n        \"1:BET\": [0.5, 0.5],  \n        \"2:BET\": [0.5, 0.5],  \n        \"3:BET\": [0.5, 0.5],  \n        \"1:PASS\": [0.5, 0.5], \n        \"2:PASS\": [0.5, 0.5], \n        \"3:PASS\": [0.5, 0.5], \n      },\n      expectedPayoffs: [],\n      regrets: {\n        \"1:\": [0, 0],     \n        \"2:\": [0, 0],     \n        \"3:\": [0, 0],     \n        \"1:BET\": [0, 0],  \n        \"2:BET\": [0, 0],  \n        \"3:BET\": [0, 0],  \n        \"1:PASS\": [0, 0], \n        \"2:PASS\": [0, 0], \n        \"3:PASS\": [0, 0], \n      },\n      regretSum: [],\n    });\n\n    // Play 3000 games with 1ms delay between each (to avoid freezing UI)\n    const totalGames = 3000;\n    const batchSize = 50; // Process in batches to update UI\n    \n    for (let i = 0; i < totalGames; i += batchSize) {\n      // Process a batch of games\n      for (let j = 0; j < batchSize && i + j < totalGames; j++) {\n        playGame();\n      }\n      \n      // Small delay between batches to allow UI updates\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    \n    setIsDemoRunning(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Kuhn Poker: CFR Bot vs Stupid Bot</h1>\n        <p>Visualization of CFR learning over 3000 iterations</p>\n      </header>\n\n      <main className=\"main-content\">\n        <div className=\"game-container\">\n          <div className=\"game-controls\">\n            <button \n              className=\"button-primary\" \n              onClick={playGame}\n              disabled={isDemoRunning}\n            >\n              Play Single Game\n            </button>\n            <button \n              className=\"button-primary demo-button\" \n              onClick={runSlowDemo}\n              disabled={isDemoRunning}\n            >\n              {isDemoRunning ? 'Demo Running...' : 'Run 3000 Games Demo'}\n            </button>\n            <div className=\"stats-container\">\n              <h3>Win Statistics</h3>\n              <div className=\"thermometer-wrapper\">\n                {/* CFR BOT */}\n                <div className=\"thermometer-group\">\n                  <div className=\"percentage-label\">\n                    {stats.total > 0 ? (stats.cfrWins / stats.total * 100).toFixed(1) : 0}%\n                  </div>\n                  <div className={`thermometer ${stats.cfrWins >= stats.stupidWins ? 'green' : 'red'}`}>\n                    <div\n                      className=\"fill\"\n                      style={{ height: `${stats.total > 0 ? (stats.cfrWins / stats.total) * 100 : 0}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"bot-label\">CFR Bot</div>\n                </div>\n\n                {/* STUPID BOT */}\n                <div className=\"thermometer-group\">\n                  <div className=\"percentage-label\">\n                    {stats.total > 0 ? (stats.stupidWins / stats.total * 100).toFixed(1) : 0}%\n                  </div>\n                  <div className={`thermometer ${stats.stupidWins > stats.cfrWins ? 'green' : 'red'}`}>\n                    <div\n                      className=\"fill\"\n                      style={{ height: `${stats.total > 0 ? (stats.stupidWins / stats.total) * 100 : 0}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"bot-label\">Stupid Bot</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"game-area\">\n            <PokerTable \n              gameHistory={gameHistory}\n              cards={cards}\n              onPlayClick={playGame}\n              isBotVsBot={isBotVsBot}\n            />\n            \n            {/* New visualization components */}\n            <div className=\"visualization-container\">\n              <StrategyVisualizer strategies={iterationData.strategies} />\n              <PayoffRegretChart \n                iterations={iterationData.iterations}\n                payoffs={iterationData.expectedPayoffs}\n                regrets={iterationData.regretSum}\n              />\n            </div>\n          </div>\n\n          <div className=\"analysis-container\">\n            <GameHistoryTable history={gameHistory} />\n          </div>\n        </div>\n      </main>\n\n      <footer>\n        <p>Kuhn Poker GTO Solver Implementation - CFR Bot vs Stupid Bot</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}